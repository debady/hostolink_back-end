# .env

# # ‚úÖ Connexion PostgreSQL sur Supabase via le pooler avec SSL activ√©
# DB_HOST=aws-0-eu-west-3.pooler.supabase.com
# DB_PORT=5432
# DB_NAME=postgres
# DB_USER=postgres.skwupmsitzsxukbmnkwv
# DB_PASSWORD=6640ywfeiQqiBMM5
# DB_SSL=true

# # ‚úÖ Configuration de Cloudinary
# CLOUDINARY_CLOUD_NAME=dhrrk7vsd
# CLOUDINARY_API_KEY=197881586145143
# CLOUDINARY_API_SECRET=HEEz2vCv7MyxBRjCZScbXeUKgEw

# # ‚úÖ Cl√© secr√®te pour JWT
# JWT_SECRET=MY_SECRET_KEY


# --------LOCAL-----------
# Configuration de la base de donn√©es PostgreSQL
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_USER=postgres
DATABASE_PASSWORD=mdp_dev_sohapigroup
DATABASE_NAME=hostolink_bd

# Configuration de Cloudinary
CLOUDINARY_CLOUD_NAME=dhrrk7vsd
CLOUDINARY_API_KEY=197881586145143
CLOUDINARY_API_SECRET=HEEz2vCv7MyxBRjCZScbXeUKgEw

# Cl√© secr√®te pour JWT
JWT_SECRET=MY_SECRET_KEY 
# # cl√© secr√®te pour chiffrer et d√©chiffrer le code QR statique 
QR_STATIC_SECRET=votre_secret_statique_tres_long_et_complexe
# # cl√© secr√®te pour chiffrer et d√©chiffrer le code QR dynamique
QR_DYNAMIC_SECRET=votre_secret_dynamique_tres_long_et_complexe


# config email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=sohapigroupcommunication@gmail.com
SMTP_PASSWORD=ljwi jest pcay slpw
SMTP_FROM=noreply@sohapigroup.com

# Cl√©s API Vonage
VONAGE_API_KEY=607d95e2
VONAGE_API_SECRET=2yxhopCqAC9LSxYE
VONAGE_SMS_SENDER=Vonage




# app.module.ts
// ---------------------LOCAL ---------------------

import { UserModule } from './utilisateur/user.module'; // ‚úÖ Module utilisateur
import { User } from './utilisateur/entities/user.entity'; // ‚úÖ Entit√© utilisateur
import { AuthModule } from './auth/auth.module'; // ‚úÖ Module d'authentification
import { Module } from '@nestjs/common'; 
import { TypeOrmModule } from '@nestjs/typeorm'; // ‚úÖ ORM TypeORM pour PostgreSQL
import { ConfigModule } from '@nestjs/config'; // ‚úÖ Gestion des variables d‚Äôenvironnement
import { Otp } from './code_verif_otp/entities/otp.entity'; // ‚úÖ Entit√© OTP
import { NotificationsModule } from './notifications/notifications.module'; // ‚úÖ Module des notifications (emails, SMS)
import { CompteModule } from './compte/compte.module';
import { QrCodeModule } from './qr-code/qr-code.module';
import { Compte } from './compte/entitie/compte.entity';
// import { EtablissementSanteModule } from './localisation_etablissement_sante/etablissement_sante.module';

@Module({
  imports: [
    // ‚úÖ Chargement des variables d'environnement depuis `.env`
    ConfigModule.forRoot({ isGlobal: true, envFilePath: '.env' }),

    // ‚úÖ Module g√©rant les notifications (email OTP)
    NotificationsModule,
    // EtablissementSanteModule,

    // ‚úÖ Connexion √† la base de donn√©es PostgreSQL via TypeORM
    TypeOrmModule.forRoot({
      type: 'postgres',
      host: process.env.DATABASE_HOST || 'localhost',
      port: Number(process.env.DATABASE_PORT) || 5432,
      username: process.env.DATABASE_USER || 'postgres',
      password: process.env.DATABASE_PASSWORD || 'mdp_dev_sohapigroup',
      database: process.env.DATABASE_NAME || 'hostolink_bd',
      autoLoadEntities: false, // ‚ùå D√©sactiv√© pour √©viter le chargement automatique des entit√©s
      synchronize: false, // ‚ùå D√©sactiv√© pour √©viter les pertes de donn√©es accidentelles
      entities: [User, Otp, Compte], // ‚úÖ D√©claration explicite des entit√©s utilis√©es
    }),

    // ‚úÖ Modules principaux de l‚Äôapplication
    UserModule, // ‚úÖ Module de gestion des utilisateurs
    AuthModule, // ‚úÖ Module d'authentification
    CompteModule,
    QrCodeModule,
    // EtablissementModule,
    

    // ‚úÖ Modules suppl√©mentaires (comment√©s pour l‚Äôinstant)
    // ImageModule, // ‚úÖ Gestion des images
    // PublicationModule, // ‚úÖ Gestion des publications
    // CommentaireModule, // ‚úÖ Gestion des commentaires
    // PartageModule, // ‚úÖ Gestion des partages
    // EtablissementSanteModule, // ‚úÖ Gestion des √©tablissements de sant√©
  ],
  // controllers: [TransactionController],
})
export class AppModule {}



// // ----------en ligne ------------------

// import { Module } from '@nestjs/common';
// import { TypeOrmModule } from '@nestjs/typeorm';
// import { ConfigModule } from '@nestjs/config';
// import { UserModule } from './user/user.module';
// import { AuthModule } from './auth/auth.module';
// import { ImageModule } from './image/image.module';
// import { PublicationModule } from './publication/publication.module';
// import { CommentaireModule } from './commentaire/commentaire.module';
// import { PartageModule } from './partage/partage.module';


// @Module({
//   imports: [
//     ConfigModule.forRoot({
//       isGlobal: true,
//     }),
//     TypeOrmModule.forRoot({
//       type: 'postgres',
//       host: process.env.DB_HOST,
//       port: Number(process.env.DB_PORT),
//       username: process.env.DB_USER,
//       password: process.env.DB_PASSWORD,
//       database: process.env.DB_NAME,
//       autoLoadEntities: true,
//       synchronize: false,
//       migrations: [__dirname + '/migrations/*{.ts,.js}'],
//       migrationsRun: true,
//       logging: process.env.NODE_ENV !== 'production',
//       extra: process.env.DB_SSL === 'true'
//         ? { ssl: { rejectUnauthorized: false } }
//         : undefined,
//     }),
//     UserModule,
//     AuthModule,
//     ImageModule,
//     PublicationModule,
//     CommentaireModule,
//     PartageModule,
//   ],

// })
// export class AppModule {}
// console.log('üìå Connexion √† PostgreSQL avec URL :', process.env.DB_HOST);



# main.ts

// ------------LOCAL -----------------

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';
import { json, urlencoded } from 'express';  
import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';

async function bootstrap() {
  try {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,  
      forbidNonWhitelisted: true,  
      transform: true,  
    }),
  );

  app.useGlobalPipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }));

  app.enableCors({
    origin: process.env.CORS_ORIGIN || '*',  
    methods: ['GET', 'HEAD', 'PATCH', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  });

  if (process.env.SERVE_STATIC === 'true') {
    app.useStaticAssets(join(__dirname, '..', 'public'));
  }

  app.use(json());  
  app.use(urlencoded({ extended: true })); 

  app.enableCors({
    origin: '*', 
    methods: ['GET', 'HEAD', 'PATCH', 'POST', 'PUT', 'DELETE'], 
    allowedHeaders: ['Content-Type', 'Authorization'], 
  });

  const PORT = process.env.PORT || 3000;
  await app.listen(PORT, '0.0.0.0');

  console.log(`le server tourne bien sur le porte üöÄ: http://localhost:${PORT}`);
  console.log('üìå Connexion √† PostgreSQL avec URL :', process.env.DATABASE_NAME);

}catch (error) {
    console.error('‚ùå erreur lors du demarrage de l application', error);
    process.exit(1);
  }
}
bootstrap();


//  ----- config en ligne -------

// import { NestFactory } from '@nestjs/core';
// import { AppModule } from './app.module';
// import { ValidationPipe } from '@nestjs/common';
// import { NestExpressApplication } from '@nestjs/platform-express';

// async function bootstrap() {
//   try {
//     const app = await NestFactory.create<NestExpressApplication>(AppModule);

//     app.useGlobalPipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }));
//     app.enableCors({
//       origin: '*',
//       methods: ['GET', 'HEAD', 'PATCH', 'POST', 'PUT', 'DELETE'],
//       allowedHeaders: ['Content-Type', 'Authorization'],
//       credentials: true,
//     });

//     const PORT = process.env.PORT || 10000;
//     await app.listen(PORT, '0.0.0.0');

//     console.log(`üöÄ le Server Tourne sur le port : http://localhost:${PORT}`);
//   } catch (error) {
//     console.error('‚ùå erreur lors du demarrage de l application', error);
//     process.exit(1);
//   }
// }
// bootstrap();